name: Build and Deploy to AKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Azure Login using federated token
      run: |
        echo "Getting ID token from GitHub OIDC provider..."
        AZ_TOKEN=$(curl -sLSH "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
    
        echo "Logging in to Azure CLI using federated token..."
        az login --service-principal \
          --federated-token "$AZ_TOKEN" \
          --tenant ${{ secrets.AZURE_TENANT_ID }} \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --allow-no-subscriptions
      shell: bash
      
    - name: Login to ACR
      run: az acr login --name ${{ secrets.ACR_NAME }}

    - name: Build and push app images
      run: |
        docker build  --no-cache -t ${{ secrets.ACR_NAME }}.azurecr.io/audio-gen:latest ./audio_gen_iep
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/audio-gen:latest

        docker build --no-cache -t ${{ secrets.ACR_NAME }}.azurecr.io/eep:latest ./eep
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/eep:latest

        docker build --no-cache -t ${{ secrets.ACR_NAME }}.azurecr.io/embeddings:latest ./embeddings_iep
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/embeddings:latest

        docker build --no-cache -t ${{ secrets.ACR_NAME }}.azurecr.io/course-creator:latest ./course_creator
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/course-creator:latest

        docker build --no-cache \
          --build-arg REACT_APP_API_URL=https://learnify503n.space/api/eep \
          -t ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest \
          ./frontend

        docker push ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest

        docker build --no-cache -t ${{ secrets.ACR_NAME }}.azurecr.io/gpt:latest ./gpt_iep
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/gpt:latest

    - name: Set AKS context manually
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_CLUSTER }} \
          --admin \
          --overwrite-existing

    - name: Force restart of deployment
      run: |
        for d in frontend eep gpt embeddings audio-gen course-creator; do
          kubectl rollout restart deployment $d
        done


    - name: Write secrets safely to files
      shell: python
      run: |
        with open("api-key.txt", "w") as f: f.write("${{ secrets.OPENAI_API_KEY }}")
        with open("db-password.txt", "w") as f: f.write("${{ secrets.DB_PASSWORD }}")
        with open("ca-cert.txt", "w") as f: f.write("${{ secrets.DigiCert_CA_Cert }}")
        with open("secret-key.txt", "w") as f: f.write("${{ secrets.SECRET_KEY }}")
    - name: Create Kubernetes Secret
      run: |
        kubectl create secret generic app-secrets \
          --from-file=api-key=api-key.txt \
          --from-file=db-password=db-password.txt \
          --from-file=ca-cert=ca-cert.txt \
          --from-file=secret-key=secret-key.txt \
          --dry-run=client -o yaml | kubectl apply -f -


    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s/cluster-issuer.yaml
        kubectl apply -f k8s/my-ingress.yaml
        kubectl apply -f k8s/course_creator-deployment.yaml
        kubectl apply -f k8s/course_creator-service.yaml
        kubectl apply -f k8s/audio-gen-deployment.yaml
        kubectl apply -f k8s/audio_gen-service.yaml
        kubectl apply -f k8s/eep-deployment.yaml
        kubectl apply -f k8s/eep-service.yaml
        kubectl apply -f k8s/embeddings-deployment.yaml
        kubectl apply -f k8s/embeddings-service.yaml
        kubectl apply -f k8s/gpt-deployment.yaml
        kubectl apply -f k8s/gpt-service.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/frontend-service.yaml
        kubectl apply -f k8s/prometheus-cm0-configmap.yaml
        kubectl apply -f k8s/prometheus-deployment.yaml
        kubectl apply -f k8s/prometheus-service.yaml
        kubectl apply -f k8s/prometheus-rbac.yaml
        