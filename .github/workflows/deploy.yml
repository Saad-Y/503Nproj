name: Build and Deploy to AKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: deploy 
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        auth-type: IDENTITY
        identity-id: /subscriptions/7f09d7a4-8b8e-4c9e-91ad-d1820abf1358/resourcegroups/LearnifyAI/providers/Microsoft.ManagedIdentity/userAssignedIdentities/gh-identity


    - name: Login to ACR
      run: az acr login --name ${{ secrets.ACR_NAME }}

    - name: Build and push app images
      run: |
        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/audio-gen:latest ./audio_gen_iep
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/audio-gen:latest

        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/eep:latest ./eep
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/eep:latest

        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/embeddings:latest ./embeddings_iep
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/embeddings:latest

        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest ./frontend
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/frontend:latest

        docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/gpt:latest ./gpt_iep
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/gpt:latest

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AKS_CLUSTER }}

    - name: Inject secrets into Kubernetes Secret
      run: |
        kubectl create secret generic app-secrets \
          --from-literal=api-key="${{ secrets.OPENAI_API_KEY }}" \
          --from-literal=db-password="${{ secrets.DB_PASSWORD }}" \
          --from-literal=ca-cert="${{ secrets.DigiCert_CA_Cert }}" \
          --from-literal=secret-key="${{ secrets.SECRET_KEY }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s/env-configmap.yaml
        kubectl apply -f k8s/audio-gen-deployment.yaml
        kubectl apply -f k8s/audio_gen-service.yaml
        kubectl apply -f k8s/eep-deployment.yaml
        kubectl apply -f k8s/eep-service.yaml
        kubectl apply -f k8s/embeddings-deployment.yaml
        kubectl apply -f k8s/embeddings-service.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/frontend-service.yaml
        kubectl apply -f k8s/gpt-deployment.yaml
        kubectl apply -f k8s/gpt-service.yaml
